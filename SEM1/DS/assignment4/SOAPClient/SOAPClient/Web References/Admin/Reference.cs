//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SOAPClient.Admin {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AdminServiceSoap", Namespace="Assignment4")]
    public partial class AdminService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAllPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPackageForTrackingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePackageTrackingOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AdminService() {
            this.Url = global::SOAPClient.Properties.Settings.Default.SOAPClient_Admin_AdminService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAllPackagesCompletedEventHandler GetAllPackagesCompleted;
        
        /// <remarks/>
        public event AddPackageCompletedEventHandler AddPackageCompleted;
        
        /// <remarks/>
        public event RemovePackageCompletedEventHandler RemovePackageCompleted;
        
        /// <remarks/>
        public event RegisterPackageForTrackingCompletedEventHandler RegisterPackageForTrackingCompleted;
        
        /// <remarks/>
        public event UpdatePackageTrackingCompletedEventHandler UpdatePackageTrackingCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Assignment4/GetAllPackages", RequestNamespace="Assignment4", ResponseNamespace="Assignment4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PackageDTO[] GetAllPackages() {
            object[] results = this.Invoke("GetAllPackages", new object[0]);
            return ((PackageDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPackagesAsync() {
            this.GetAllPackagesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllPackagesAsync(object userState) {
            if ((this.GetAllPackagesOperationCompleted == null)) {
                this.GetAllPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPackagesOperationCompleted);
            }
            this.InvokeAsync("GetAllPackages", new object[0], this.GetAllPackagesOperationCompleted, userState);
        }
        
        private void OnGetAllPackagesOperationCompleted(object arg) {
            if ((this.GetAllPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPackagesCompleted(this, new GetAllPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Assignment4/AddPackage", RequestNamespace="Assignment4", ResponseNamespace="Assignment4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPackage(string sender, string receiver, string name, string description, string senderCity, string destinationCity) {
            object[] results = this.Invoke("AddPackage", new object[] {
                        sender,
                        receiver,
                        name,
                        description,
                        senderCity,
                        destinationCity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPackageAsync(string sender, string receiver, string name, string description, string senderCity, string destinationCity) {
            this.AddPackageAsync(sender, receiver, name, description, senderCity, destinationCity, null);
        }
        
        /// <remarks/>
        public void AddPackageAsync(string sender, string receiver, string name, string description, string senderCity, string destinationCity, object userState) {
            if ((this.AddPackageOperationCompleted == null)) {
                this.AddPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPackageOperationCompleted);
            }
            this.InvokeAsync("AddPackage", new object[] {
                        sender,
                        receiver,
                        name,
                        description,
                        senderCity,
                        destinationCity}, this.AddPackageOperationCompleted, userState);
        }
        
        private void OnAddPackageOperationCompleted(object arg) {
            if ((this.AddPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPackageCompleted(this, new AddPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Assignment4/RemovePackage", RequestNamespace="Assignment4", ResponseNamespace="Assignment4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemovePackage(string name) {
            object[] results = this.Invoke("RemovePackage", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePackageAsync(string name) {
            this.RemovePackageAsync(name, null);
        }
        
        /// <remarks/>
        public void RemovePackageAsync(string name, object userState) {
            if ((this.RemovePackageOperationCompleted == null)) {
                this.RemovePackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePackageOperationCompleted);
            }
            this.InvokeAsync("RemovePackage", new object[] {
                        name}, this.RemovePackageOperationCompleted, userState);
        }
        
        private void OnRemovePackageOperationCompleted(object arg) {
            if ((this.RemovePackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePackageCompleted(this, new RemovePackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Assignment4/RegisterPackageForTracking", RequestNamespace="Assignment4", ResponseNamespace="Assignment4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RegisterPackageForTracking(string name) {
            object[] results = this.Invoke("RegisterPackageForTracking", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPackageForTrackingAsync(string name) {
            this.RegisterPackageForTrackingAsync(name, null);
        }
        
        /// <remarks/>
        public void RegisterPackageForTrackingAsync(string name, object userState) {
            if ((this.RegisterPackageForTrackingOperationCompleted == null)) {
                this.RegisterPackageForTrackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPackageForTrackingOperationCompleted);
            }
            this.InvokeAsync("RegisterPackageForTracking", new object[] {
                        name}, this.RegisterPackageForTrackingOperationCompleted, userState);
        }
        
        private void OnRegisterPackageForTrackingOperationCompleted(object arg) {
            if ((this.RegisterPackageForTrackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPackageForTrackingCompleted(this, new RegisterPackageForTrackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("Assignment4/UpdatePackageTracking", RequestNamespace="Assignment4", ResponseNamespace="Assignment4", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatePackageTracking(string name, string cityDate) {
            object[] results = this.Invoke("UpdatePackageTracking", new object[] {
                        name,
                        cityDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePackageTrackingAsync(string name, string cityDate) {
            this.UpdatePackageTrackingAsync(name, cityDate, null);
        }
        
        /// <remarks/>
        public void UpdatePackageTrackingAsync(string name, string cityDate, object userState) {
            if ((this.UpdatePackageTrackingOperationCompleted == null)) {
                this.UpdatePackageTrackingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePackageTrackingOperationCompleted);
            }
            this.InvokeAsync("UpdatePackageTracking", new object[] {
                        name,
                        cityDate}, this.UpdatePackageTrackingOperationCompleted, userState);
        }
        
        private void OnUpdatePackageTrackingOperationCompleted(object arg) {
            if ((this.UpdatePackageTrackingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePackageTrackingCompleted(this, new UpdatePackageTrackingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Assignment4")]
    public partial class PackageDTO {
        
        private string senderField;
        
        private string receiverField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string senderCityField;
        
        private string destinationCityField;
        
        private string isTrackedField;
        
        private string trackingField;
        
        /// <remarks/>
        public string Sender {
            get {
                return this.senderField;
            }
            set {
                this.senderField = value;
            }
        }
        
        /// <remarks/>
        public string Receiver {
            get {
                return this.receiverField;
            }
            set {
                this.receiverField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string SenderCity {
            get {
                return this.senderCityField;
            }
            set {
                this.senderCityField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationCity {
            get {
                return this.destinationCityField;
            }
            set {
                this.destinationCityField = value;
            }
        }
        
        /// <remarks/>
        public string isTracked {
            get {
                return this.isTrackedField;
            }
            set {
                this.isTrackedField = value;
            }
        }
        
        /// <remarks/>
        public string Tracking {
            get {
                return this.trackingField;
            }
            set {
                this.trackingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetAllPackagesCompletedEventHandler(object sender, GetAllPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PackageDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PackageDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AddPackageCompletedEventHandler(object sender, AddPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RemovePackageCompletedEventHandler(object sender, RemovePackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void RegisterPackageForTrackingCompletedEventHandler(object sender, RegisterPackageForTrackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPackageForTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPackageForTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UpdatePackageTrackingCompletedEventHandler(object sender, UpdatePackageTrackingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePackageTrackingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePackageTrackingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591